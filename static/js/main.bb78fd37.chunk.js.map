{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","latitude","longitude","width","height","zoom","viewport","setViewport","selectedGround","setSelectedGround","useEffect","listener","e","key","window","addEventListener","removeEventListener","mapboxApiAccessToken","mapStyle","onViewportChange","cricketData","map","cricket","geometry","coordinates","className","onClick","preventDefault","src","alt","properties","PARK_ID","onClose","NAME","RATING","WEBSITE","DESCRIPTION","ADDRESS","CODE","PHONENO","ESTABLISHMENT","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8moBAGe,SAASA,IAAO,IAAD,EACIC,mBAAS,CACvCC,SAAU,QACVC,UAAW,QACXC,MAAO,QACPC,OAAQ,QACRC,KAAM,KANoB,mBACrBC,EADqB,KACXC,EADW,OAQgBP,mBAAS,MARzB,mBAQrBQ,EARqB,KAQLC,EARK,KAoB5B,OAXAC,qBAAU,WACR,IAAMC,EAAW,SAACC,GACF,WAAVA,EAAEC,KACJJ,EAAkB,OAItB,OADAK,OAAOC,iBAAiB,UAAWJ,GAC5B,WACLG,OAAOE,oBAAoB,UAAWL,MAEvC,IAED,8BACE,eAAC,IAAD,2BACML,GADN,IAEEW,qBAAqB,gGACrBC,SAAS,uDACTC,iBAAkB,SAACb,GACjBC,EAAYD,IALhB,UAQGc,IAAqBC,KAAI,SAACC,GAAD,OACxB,cAAC,IAAD,CAEErB,SAAUqB,EAAQC,SAASC,YAAY,GACvCtB,UAAWoB,EAAQC,SAASC,YAAY,GAH1C,SAKE,wBACEC,UAAU,aACVC,QAAS,SAACd,GACRA,EAAEe,iBACFlB,EAAkBa,IAJtB,SAOE,qBAAKM,IAAI,WAAWC,IAAI,mBAXrBP,EAAQQ,WAAWC,YAe3BvB,EACC,cAAC,IAAD,CACEP,SAAUO,EAAee,SAASC,YAAY,GAC9CtB,UAAWM,EAAee,SAASC,YAAY,GAC/CQ,QAAS,WACPvB,EAAkB,OAJtB,SAOE,gCACE,4BACE,+BACGD,EAAesB,WAAWG,KAD7B,KAEGzB,EAAesB,WAAWI,OAF7B,SAKF,mCAAM1B,EAAesB,WAAWK,WAChC,4BAAI3B,EAAesB,WAAWM,cAC9B,4BACE,+BACG5B,EAAesB,WAAWO,QAC1B7B,EAAesB,WAAWQ,KAF7B,OAEuC,IACpC9B,EAAesB,WAAWS,QAH7B,OAIG/B,EAAesB,WAAWU,wBAKjC,WC7EZ,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACrD,EAAD,MAEFsD,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bb78fd37.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ReactMapGL, { Marker, Popup } from \"react-map-gl\";\nimport * as cricketData from \"./data/cricket-grounds.json\";\nexport default function App() {\n  const [viewport, setViewport] = useState({\n    latitude: 11.1271,\n    longitude: 78.6569,\n    width: \"100vw\",\n    height: \"100vh\",\n    zoom: 10,\n  });\n  const [selectedGround, setSelectedGround] = useState(null);\n  useEffect(() => {\n    const listener = (e) => {\n      if (e.key === \"Escape\") {\n        setSelectedGround(null);\n      }\n    };\n    window.addEventListener(\"keydown\", listener);\n    return () => {\n      window.removeEventListener(\"keydown\", listener);\n    };\n  }, []);\n  return (\n    <div>\n      <ReactMapGL\n        {...viewport}\n        mapboxApiAccessToken=\"pk.eyJ1Ijoic2hydXRoaTEyMCIsImEiOiJja2J3ZDg2emUwZXZ2MnNucTNsZ3Vpejl0In0.NHPq95OFCnucqIdRv8ZNAg\"\n        mapStyle=\"mapbox://styles/shruthi120/ckbxtetqv1uti1iqqa7oo8bs0\"\n        onViewportChange={(viewport) => {\n          setViewport(viewport);\n        }}\n      >\n        {cricketData.features.map((cricket) => (\n          <Marker\n            key={cricket.properties.PARK_ID}\n            latitude={cricket.geometry.coordinates[0]}\n            longitude={cricket.geometry.coordinates[1]}\n          >\n            <button\n              className=\"marker-btn\"\n              onClick={(e) => {\n                e.preventDefault();\n                setSelectedGround(cricket);\n              }}\n            >\n              <img src=\"/cri.png\" alt=\"Cricet Icon\" />\n            </button>\n          </Marker>\n        ))}\n        {selectedGround ? (\n          <Popup\n            latitude={selectedGround.geometry.coordinates[0]}\n            longitude={selectedGround.geometry.coordinates[1]}\n            onClose={() => {\n              setSelectedGround(null);\n            }}\n          >\n            <div>\n              <p>\n                <h4>\n                  {selectedGround.properties.NAME} (\n                  {selectedGround.properties.RATING})\n                </h4>\n              </p>\n              <h7> {selectedGround.properties.WEBSITE}</h7>\n              <p>{selectedGround.properties.DESCRIPTION}</p>\n              <p>\n                <h4>\n                  {selectedGround.properties.ADDRESS}\n                  {selectedGround.properties.CODE} , ({\" \"}\n                  {selectedGround.properties.PHONENO} ) ,\n                  {selectedGround.properties.ESTABLISHMENT}\n                </h4>\n              </p>\n            </div>\n          </Popup>\n        ) : null}\n      </ReactMapGL>\n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}